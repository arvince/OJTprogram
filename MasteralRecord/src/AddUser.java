
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Arvince Neil
 */
public class AddUser extends javax.swing.JFrame {

    /**
     * Creates new form AddUser
     */
    public AddUser() {
        initComponents();
    }
    
    public static String FileName = "C:\\Users\\Arvince Neil\\Desktop\\MasteralRecord\\src\\masteral.txt";
//    public static int row = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        LabelName = new javax.swing.JLabel();
        FieldName = new javax.swing.JTextField();
        LabelID = new javax.swing.JLabel();
        FieldID = new javax.swing.JTextField();
        LabelCourse = new javax.swing.JLabel();
        FieldCourse = new javax.swing.JTextField();
        LabelBasic = new javax.swing.JLabel();
        ScrollPaneBasic = new javax.swing.JScrollPane();
        TableBasic = new javax.swing.JTable();
        LabelMajor = new javax.swing.JLabel();
        ScrollPaneMajor = new javax.swing.JScrollPane();
        TableMajor = new javax.swing.JTable();
        LabelElective = new javax.swing.JLabel();
        ScrollPaneElective = new javax.swing.JScrollPane();
        TableElective = new javax.swing.JTable();
        LabelBackSubject = new javax.swing.JLabel();
        ScrollPaneBackSUbject = new javax.swing.JScrollPane();
        TableBackSubject = new javax.swing.JTable();
        LabelThesis = new javax.swing.JLabel();
        ScrollPaneThesis = new javax.swing.JScrollPane();
        TableThesis = new javax.swing.JTable();
        ButtonSave = new javax.swing.JButton();
        ButtonBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1366, 1000));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1366, 1000));

        jPanel1.setMaximumSize(new java.awt.Dimension(1366, 1000));

        LabelName.setText("Name:");

        FieldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldNameActionPerformed(evt);
            }
        });

        LabelID.setText("ID #:");

        FieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldIDActionPerformed(evt);
            }
        });

        LabelCourse.setText("Course:");

        FieldCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldCourseActionPerformed(evt);
            }
        });

        LabelBasic.setText("Basic Core Subjects");

        TableBasic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Code", "Title", "Units", "Term", "Grade"
            }
        ));
        ScrollPaneBasic.setViewportView(TableBasic);

        LabelMajor.setText("Major Subjects");

        TableMajor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Code", "Title ", "Units", "Term", "Grade"
            }
        ));
        ScrollPaneMajor.setViewportView(TableMajor);

        LabelElective.setText("Elective Subjects");

        TableElective.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Code", "Title ", "Units", "Term", "Grade"
            }
        ));
        ScrollPaneElective.setViewportView(TableElective);

        LabelBackSubject.setText("Back Subjects");

        TableBackSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Code", "Title ", "Units", "Term", "Grade"
            }
        ));
        ScrollPaneBackSUbject.setViewportView(TableBackSubject);

        LabelThesis.setText("Thesis");

        TableThesis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Code", "Title", "Units", "Term", "Grade"
            }
        ));
        ScrollPaneThesis.setViewportView(TableThesis);

        ButtonSave.setText("Save");
        ButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSaveActionPerformed(evt);
            }
        });

        ButtonBack.setText("Back");
        ButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelThesis, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelBackSubject)
                            .addComponent(LabelElective)
                            .addComponent(LabelBasic)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(LabelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(LabelID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(LabelCourse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FieldCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(LabelMajor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 693, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonSave)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonBack)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ScrollPaneThesis, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE)
                            .addComponent(ScrollPaneBackSUbject, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollPaneElective, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollPaneMajor, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollPaneBasic, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelName)
                    .addComponent(LabelID)
                    .addComponent(FieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelCourse)
                    .addComponent(FieldCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(LabelBasic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneBasic, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelMajor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelElective)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneElective, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelBackSubject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneBackSUbject, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelThesis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneThesis, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonBack)
                    .addComponent(ButtonSave))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FieldNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldNameActionPerformed

    private void FieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldIDActionPerformed

    private void FieldCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldCourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldCourseActionPerformed

    private void ButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSaveActionPerformed
                
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(FileName,true))) {
                    int row = 0;

                    while(TableBasic.getModel().getValueAt(row, 0) != null){
                        String content = (String) FieldName.getText()+"/"+FieldID.getText()+"/"+TableBasic.getModel().getValueAt(row, 0)+"/"+TableBasic.getModel().getValueAt(row, 1)+"/"+TableBasic.getModel().getValueAt(row, 2)+"/"+TableBasic.getModel().getValueAt(row, 3)+"/"+TableBasic.getModel().getValueAt(row, 4)+"/"+FieldCourse.getText();
                        bw.newLine();
                        bw.write(content);
                        row++;
                    }                  

			// no need to close it.
			//bw.close();

                    System.out.println("Done");
                    bw.flush();
                    bw.close();

		} catch (IOException e) {

			e.printStackTrace();

		}
                
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(FileName,true))) {
                    int row = 0;

                    while(TableMajor.getModel().getValueAt(row, 0) != null){
                        String content = (String) FieldName.getText()+"/"+FieldID.getText()+"/"+TableMajor.getModel().getValueAt(row, 0)+"/"+TableMajor.getModel().getValueAt(row, 1)+"/"+TableMajor.getModel().getValueAt(row, 2)+"/"+TableMajor.getModel().getValueAt(row, 3)+"/"+TableMajor.getModel().getValueAt(row, 4)+"/"+FieldCourse.getText();
                        bw.newLine();
                        bw.write(content);
                        row++;
                    }                  

			// no need to close it.
			//bw.close();

                    System.out.println("Done");
                    bw.flush();
                    bw.close();

		} catch (IOException e) {

			e.printStackTrace();

		}
                
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(FileName,true))) {
                    int row = 0;

                    while(TableElective.getModel().getValueAt(row, 0) != null){
                        String content = (String) FieldName.getText()+"/"+FieldID.getText()+"/"+TableElective.getModel().getValueAt(row, 0)+"/"+TableElective.getModel().getValueAt(row, 1)+"/"+TableElective.getModel().getValueAt(row, 2)+"/"+TableElective.getModel().getValueAt(row, 3)+"/"+TableElective.getModel().getValueAt(row, 4)+"/"+FieldCourse.getText();
                        bw.newLine();
                        bw.write(content);
                        row++;
                    }                  

			// no need to close it.
			//bw.close();

                    System.out.println("Done");
                    bw.flush();
                    bw.close();

		} catch (IOException e) {

			e.printStackTrace();

		}
                
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(FileName,true))) {
                    int row = 0;

                    while(TableBackSubject.getModel().getValueAt(row, 0) != null){
                        String content = (String) FieldName.getText()+"/"+FieldID.getText()+"/"+TableBackSubject.getModel().getValueAt(row, 0)+"/"+TableBackSubject.getModel().getValueAt(row, 1)+"/"+TableBackSubject.getModel().getValueAt(row, 2)+"/"+TableBackSubject.getModel().getValueAt(row, 3)+"/"+TableBackSubject.getModel().getValueAt(row, 4)+"/"+FieldCourse.getText();
                        bw.newLine();
                        bw.write(content);
                        row++;
                    }                  

			// no need to close it.
			//bw.close();

                    System.out.println("Done");
                    bw.flush();
                    bw.close();

		} catch (IOException e) {

			e.printStackTrace();

		}
                
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(FileName,true))) {
                    int row = 0;

                    while(TableThesis.getModel().getValueAt(row, 0) != null){
                        String content = (String) FieldName.getText()+"/"+FieldID.getText()+"/"+TableThesis.getModel().getValueAt(row, 0)+"/"+TableThesis.getModel().getValueAt(row, 1)+"/"+TableThesis.getModel().getValueAt(row, 2)+"/"+TableThesis.getModel().getValueAt(row, 3)+"/"+TableThesis.getModel().getValueAt(row, 4)+"/"+FieldCourse.getText();
                        bw.newLine();
                        bw.write(content);
                        row++;
                    }                  

			// no need to close it.
			//bw.close();

                    System.out.println("Done");
                    bw.flush();
                    bw.close();

		} catch (IOException e) {

			e.printStackTrace();

		}
                
                JOptionPane.showMessageDialog(this, "Add Saved", "Success", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_ButtonSaveActionPerformed

    private void ButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBackActionPerformed
        Search searchFrame =  new Search();
        searchFrame.setVisible(true);
    }//GEN-LAST:event_ButtonBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBack;
    private javax.swing.JButton ButtonSave;
    private javax.swing.JTextField FieldCourse;
    private javax.swing.JTextField FieldID;
    private javax.swing.JTextField FieldName;
    private javax.swing.JLabel LabelBackSubject;
    private javax.swing.JLabel LabelBasic;
    private javax.swing.JLabel LabelCourse;
    private javax.swing.JLabel LabelElective;
    private javax.swing.JLabel LabelID;
    private javax.swing.JLabel LabelMajor;
    private javax.swing.JLabel LabelName;
    private javax.swing.JLabel LabelThesis;
    private javax.swing.JScrollPane ScrollPaneBackSUbject;
    private javax.swing.JScrollPane ScrollPaneBasic;
    private javax.swing.JScrollPane ScrollPaneElective;
    private javax.swing.JScrollPane ScrollPaneMajor;
    private javax.swing.JScrollPane ScrollPaneThesis;
    private javax.swing.JTable TableBackSubject;
    private javax.swing.JTable TableBasic;
    private javax.swing.JTable TableElective;
    private javax.swing.JTable TableMajor;
    private javax.swing.JTable TableThesis;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
