/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;
import masteralrecord.Data.*;
import masteralrecord.Entity.*;

/**
 *
 * @author Arvince Neil
 */
public class SearchGUI extends javax.swing.JFrame {
    

    /**
     * Creates new form SearchGUI
     */
    public SearchGUI() {
        initComponents();
        String fileName = "C:\\Users\\Arvince Neil\\Desktop\\MasteralRecord\\src\\myFile.txt";
         if(TranscriptRecordDao.getInstance().GetFileName().equals("") && 
                 TranscriptRecordDao.getInstance().GetRecords().size() < 1){
             TranscriptRecordDao.getInstance().SetFileName(fileName);
             TranscriptRecordDao.getInstance().LoadData();
         }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course No.", "Title", "Unit", "Term", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course No.", "Title", "Unit", "Term", "Grade"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course No.", "Title", "Unit", "Term", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course No.", "Title ", "Unit", "Term", "Grade"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course No.", "Title", "Unit", "Term", "Grade"
            }
        ));
        jScrollPane5.setViewportView(jTable5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(414, 414, 414)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        ArrayList<Check> list1 = basic();
        Object rowData1[] = new Object[5];
        for(int i = 0; i < list1.size(); i++){
            rowData1[0] = list1.get(i).courseno;
            rowData1[1] = list1.get(i).title;
            rowData1[2] = list1.get(i).units;
            rowData1[3] = list1.get(i).term;
            rowData1[4] = list1.get(i).grade;
            model1.addRow(rowData1);
        }
        DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
        ArrayList<Check> listm1 = major1();
        Object rowDatam1[] = new Object[5];
        for(int i = 0; i < listm1.size(); i++){
            rowDatam1[0] = listm1.get(i).courseno;
            rowDatam1[1] = listm1.get(i).title;
            rowDatam1[2] = listm1.get(i).units;
            rowDatam1[3] = listm1.get(i).term;
            rowDatam1[4] = listm1.get(i).grade;
            model2.addRow(rowDatam1);
        }

        DefaultTableModel model3 = (DefaultTableModel) jTable3.getModel();
        ArrayList<Check> list3 = thesis();
        Object rowData3[] = new Object[5];
        for(int i = 0; i < list3.size(); i++){
            rowData3[0] = list3.get(i).courseno;
            rowData3[1] = list3.get(i).title;
            rowData3[2] = list3.get(i).units;
            rowData3[3] = list3.get(i).term;
            rowData3[4] = list3.get(i).grade;
            model3.addRow(rowData3);
        }
        DefaultTableModel model4 = (DefaultTableModel) jTable4.getModel();
        ArrayList<Check> list4 = elective();
        Object rowData4[] = new Object[5];
        for(int i = 0; i < list4.size(); i++){
            rowData4[0] = list4.get(i).courseno;
            rowData4[1] = list4.get(i).title;
            rowData4[2] = list4.get(i).units;
            rowData4[3] = list4.get(i).term;
            rowData4[4] = list4.get(i).grade;
            model4.addRow(rowData4);
        }
        DefaultTableModel model5 = (DefaultTableModel) jTable5.getModel();
        ArrayList<Check> list5 = dissertation();
        Object rowData5[] = new Object[5];
        for(int i = 0; i < list5.size(); i++){
            rowData5[0] = list5.get(i).courseno;
            rowData5[1] = list5.get(i).title;
            rowData5[2] = list5.get(i).units;
            rowData5[3] = list5.get(i).term;
            rowData5[4] = list5.get(i).grade;
            model5.addRow(rowData5);
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchGUI().setVisible(true);
            }
        });
        
    }
    
    private static Scanner input;
    
    
    public static ArrayList<Check> basic(){
         ArrayList<Check> basic = new ArrayList<Check>();
         String fileName = "C:\\Users\\Arvince Neil\\Desktop\\MasteralRecord\\src\\masteral.txt";
         String line = "";
         
         Records.forEach((rec) ->{
             if(rec.name.equals("")){
                 if(rec.idnum.contains("502455")){
                     if(rec.courseno.equals("N-301") || rec.courseno.equals("N-302")){
                         basic.add(rec);
                     }
                 }
             }
         });

//         try (BufferedReader br = new BufferedReader(new FileReader(fileName))){
//             input = new Scanner(System.in);
//            String in;
//
//            while ((line = br.readLine()) != null) {
//                String[] record = line.split("/");
//                    if (!record[0].equals("")){
//                        if (record[1].contains("502455")){
//                    if(record[2].equals("N-301") || record[2].equals("N-302") ){
//                Check ch = new Check(record[0], record[1], record[2], record[3], record[4], record[5], record[6], record[7]);
//                basic.add(ch);
//                    }
//                }
//                    }
//            }
//         }catch (IOException e) {
//            e.printStackTrace();
//        }
         return basic;
     }
    
    public static ArrayList<Check> major1(){
         ArrayList<Check> major1 = new ArrayList<Check>();
         String fileName = "C:\\Users\\Arvince Neil\\Desktop\\MasteralRecord\\src\\masteral.txt";
         String line = "";
         ArrayList<String> subjects = new ArrayList<>(Arrays.asList(new String[]{
             "N-310","N-311","N-312","N-313","N-314","N-315"
         }));
         
         Records.forEach((rec) ->{
             if(rec.name.equals("")){
                 if(rec.idnum.contains("502455")){
                     if(subjects.contains(rec.courseno)){
                         major1.add(rec);
                     }
                 }
             }
         });
         
//         try (BufferedReader br = new BufferedReader(new FileReader(fileName))){
//             input = new Scanner(System.in);
//            String in;
//
//            while ((line = br.readLine()) != null) {
//                String[] record = line.split("/");
//                    if (!record[0].equals("")){
//                        if (record[1].contains("502455")){                   
//                    if(record[2].equals("N-310") || record[2].equals("N-311") || record[2].equals("N-313")|| record[2].equals("N-314") || record[2].equals("N-315")){
//                Check ch = new Check(record[0], record[1], record[2], record[3], record[4], record[5], record[6], record[7]);
//                major1.add(ch);
//                    }
//                }
//                    }
//            }
//         }catch (IOException e) {
//            e.printStackTrace();
//        }
         return major1;
     }
         
    public static ArrayList<Check> thesis(){
         ArrayList<Check> thesis = new ArrayList<Check>();
         String fileName = "C:\\Users\\Arvince Neil\\Desktop\\MasteralRecord\\src\\masteral.txt";
         String line = "";
         
         ArrayList<String> subjects = new ArrayList<>(Arrays.asList(new String[]{
             "N-424","N-425","N-422","N-423"
         }));
         
         Records.forEach((rec) ->{
             if(rec.name.equals("")){
                 if(rec.idnum.contains("502455")){
                     if(subjects.contains(rec.courseno)){
                         thesis.add(rec);
                     }
                 }
             }
         });

//         try (BufferedReader br = new BufferedReader(new FileReader(fileName))){
//             input = new Scanner(System.in);
//            String in;
//
//            while ((line = br.readLine()) != null) {
//                String[] record = line.split("/");
//                    if (!record[0].equals("")){
//                        if (record[1].contains("502455")){
//                    if( record[2].equals("N-424") ||  record[2].equals("N-425") ||  record[2].equals("N-422") ||  record[2].equals("N-423")){
//                Check ch = new Check(record[0], record[1], record[2], record[3], record[4], record[5], record[6], record[7]);
//                thesis.add(ch);
//                        }
//                    }
//                }
//            }
//         }catch (IOException e) {
//            e.printStackTrace();
//        }
         return thesis;
     }
    
    public static ArrayList<Check> elective(){
         ArrayList<Check> elective = new ArrayList<Check>();
         String fileName = "C:\\Users\\Arvince Neil\\Desktop\\MasteralRecord\\src\\masteral.txt";
         String line = "";
         
         ArrayList<String> subjects = new ArrayList<>(Arrays.asList(new String[]{
             "N-410","N-411","N-412","N-413","N-414","N-415",
             "N-416","N-417","N-418","N-419","N-420","N-421",
         }));
         
         Records.forEach((rec) ->{
             if(rec.name.equals("")){
                 if(rec.idnum.contains("502455")){
                     if(subjects.contains(rec.courseno)){
                         elective.add(rec);
                     }
                 }
             }
         });

//         try (BufferedReader br = new BufferedReader(new FileReader(fileName))){
//             input = new Scanner(System.in);
//            String in;
//
//            while ((line = br.readLine()) != null) {
//                String[] record = line.split("/");
//                if (!record[0].equals("")){
//                    if (record[1].contains("502455")){                    
//                    if(record[2].equals("N-410") || record[2].equals("N-411") || record[2].equals("N-412")|| record[2].equals("N-413") || record[2].equals("N-414") || record[2].equals("N-415")|| record[2].equals("N-416") || record[2].equals("N-417") || record[2].equals("N-418")|| record[2].equals("N-419") || record[2].equals("N-420") || record[2].equals("N-421")){                                                                                              
//                                Check ch = new Check(record[0], record[1], record[2], record[3], record[4], record[5], record[6], record[7]);
//                                elective.add(ch);
//                            }
//                    }
//                }
//            }
//         }catch (IOException e) {
//            e.printStackTrace();
//        }
         return elective;
     }
    
    public static ArrayList<Check> dissertation(){
         ArrayList<Check> elective = new ArrayList<Check>();
         String fileName = "C:\\Users\\Arvince Neil\\Desktop\\MasteralRecord\\src\\masteral.txt";
         String line = "";
         
         ArrayList<String> subjects = new ArrayList<>(Arrays.asList(new String[]{
             "N-400","N-401","N-402"
         }));
         
         Records.forEach((rec) ->{
             if(rec.name.equals("")){
                 if(rec.idnum.contains("502455")){
                     if(subjects.contains(rec.courseno)){
                         elective.add(rec);
                     }
                 }
             }
         });

//         try (BufferedReader br = new BufferedReader(new FileReader(fileName))){
//             input = new Scanner(System.in);
//            String in;
//
//            while ((line = br.readLine()) != null) {
//                String[] record = line.split("/");
//                if (!record[0].equals("")){
//                    if (record[1].contains("502455")){                    
//                    if(record[2].equals("N-400") || record[2].equals("N-401") || record[2].equals("N-402")){                                                                                              
//                                Check ch = new Check(record[0], record[1], record[2], record[3], record[4], record[5], record[6], record[7]);
//                                elective.add(ch);
//                            }
//                    }
//                }
//            }
//         }catch (IOException e) {
//            e.printStackTrace();
//        }
         return elective;
     }
    
    private static final ArrayList<Check> Records = TranscriptRecordDao.getInstance().GetRecords();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    // End of variables declaration//GEN-END:variables
}
